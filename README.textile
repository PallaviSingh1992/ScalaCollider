h2. ScalaCollider ==<small>-- SYNTHETIC UGENS BRANCH --</small>==

h3. statement

ScalaCollider is a SuperCollider client for the Scala language. It is (C)opyright 2008-2011 by Hanns Holger Rutz. All rights reserved. ScalaCollider is released under the "GNU General Public License":http://github.com/Sciss/ScalaCollider/blob/master/licenses/ScalaCollider-License.txt and comes with absolutely no warranties. To contact the author, send an email to @contact at sciss.de@

h3. branch

NOTE: you have checked out the synthetic-ugens branch. This is an experimental branch which uses UGen classes synthetically generated by the
ScalaCollider-UGens project, and trying to add compile-type rate-checking. The latter is still undergoing massive changes, and a few features
are currently disabled. 

* the mce method cannot be implicitly called due to a scala-bug, so it needs to be explicitly inserted.
* the implicit conversion to GraphFunction doesn't work. so instead of @{ }.play@, use @play { }@
* @Mix.tabulate@ and @fill@ currently cannot be used with @Multi[...]@
* recursive graph generation may require type annotations. specifically all UGen classes now return the
  UGen type itself instead of GE, which comes with the need to annotate vars:

bc. val x = play {
    // pink noise percussion sound :
    val s = Decay.ar(Dust.ar(0.6)*0.2, 0.15) * PinkNoise.ar
    // reverb predelay time :
    val z = DelayN.ar(s, 0.048, 0.048)
    // 6 modulated comb delays in parallel :
    var y: GE[audio, UGenIn[audio]] = Mix(CombL.ar(z, 0.1, 
        LFNoise1.kr(mce(for(i <- 0 until 6) yield Rand(0,0.1))).madd(0.04, 0.05), 15))
    // chain of 4 allpass delays on each of two channels (8 total) :
    for(i <- 0 until 4) { y = AllpassN.ar(y, 0.050, mce(List(Rand(0,0.050),Rand(0,0.050))), 1)}
    // add original sound to reverb and play it :
    s+y
}


h3. requirements / installation

ScalaCollider currently compiles against Scala 2.8.0. It requires Java 1.6 and SuperCollider 3.3.1+. It depends on ScalaOSC ( "github.com/Sciss/ScalaOSC":http://github.com/Sciss/ScalaOSC ) and ScalaAudioFile ( "github.com/Sciss/ScalaAudioFile":http://github.com/Sciss/ScalaAudioFile )

The repository contains a project file for Intellij IDEA 9 CE, and project files for sbt. Targets for sbt:

* @clean@
* @compile@
* @doc@
* @package@
* @demo@

The easiest way to install ScalaOSC and ScalaAudioFile is to go into their respective git repository clones, and then for each execute

@$ sbt publish-local@

Afterwards, go back into the clone of the ScalaCollider git repository, and simply run

@$ sbt update@

which should find ScalaOSC and ScalaAudioFile in your local Ivy repository.

h3. running the demo

The demo target starts a REPL and executes the file @console-startup.txt@ which by default imports the necessary packages, creates a server-options builder bound to @so@ and defines a @boot@ method. make sure that @so.programPath@ is set correctly:

@scala> so.programPath = "/to/my/scsynth"@

You might omit this, as ScalaCollider will by default read the environment variable @SC_HOME@. Environment variables are stored depending on your operating system. On OS X, if you use the app-bundle of ScalaCollider-Swing, you can access them from the terminal:

pre. $ touch ~/.MacOSX/environment.plist
$ open ~/.MacOSX/environment.plist

On the other hand, if you run ScalaCollider from a Bash terminal, you instead edit @~/.bash_profile@. The entry is something like @export SC_HOME=/path/to/folder-of-scsynth@. On linux, the environment variables probably go in @~/.profile@.

Finally, to boot the server:

@scala> boot@

Please refer to @ExampleCmd.txt@ for some example code. There is also an introductory video for the "Swing frontend":http://github.com/Sciss/ScalaColliderSwing at "www.screencast.com/t/YjUwNDZjMT":http://www.screencast.com/t/YjUwNDZjMT

h3. download

The current version can be downloaded from "github.com/Sciss/ScalaCollider":http://github.com/Sciss/ScalaCollider
