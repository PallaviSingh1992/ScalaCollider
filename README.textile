h2. ScalaCollider ==<small>-- SYNTHETIC UGENS BRANCH --</small>==

h3. statement

ScalaCollider is a SuperCollider client for the Scala language. It is (C)opyright 2008-2011 by Hanns Holger Rutz. All rights reserved. ScalaCollider is released under the "GNU General Public License":http://github.com/Sciss/ScalaCollider/blob/master/licenses/ScalaCollider-License.txt and comes with absolutely no warranties. To contact the author, send an email to @contact at sciss.de@

h3. branch

NOTE: you have checked out the synthetic-ugens branch. This is an experimental branch which uses UGen classes synthetically generated by the
ScalaCollider-UGens project, and trying out different things. This is undergoing changes, and a few features
are currently disabled.

* To facilitate such re-writing, graph elements are now _lazy_ which means they
  do not instantly (multi-channel) expand into UGens. The idea is to be able to capture the whole
  expression tree, which then could be used to transform it, to visualize it (before multi-channel
  expansion!), etc.
* In the meantime, the UGens themselves are not represented any more by individual classes but
  only generic classes such as SingleOutUGen. As we expect manipulations to happen at the
  GE level, this keeps the number of classes smaller.
* The SynthDef creation process is now two staged. The GE tree is captured as a SynthGraph which
  in turn expands into a UGenGraph.
* Automatic subtree omission for side-effect-free roots is currently disabled.
* We started to implement type constraints for the rates, but this is all a difficult business and 
  will take more time to find its final shape. Branch Synthetic3 represents the latest effort.
  The project was killed in branch Synthetic4, though.
* the implicit conversion to GraphFunction has been disabled. so instead of @{ }.play@, use @play { }@
* @Multi@ was introduced which wrapped graph elements representing true multi-channel signals, that is
  not synthetically expanded signals but for instance UGens which have several outputs (e.g. In, PlayBuf).
  In the meantime @Multi@ has been eliminated again, and the wrapping behaviour of sclang has been
  adopted successfully.
* recursive graph generation may require type annotations. specifically all UGen classes now return the
  UGen type itself instead of GE, which comes with the need to annotate vars in certain cases.

h3. requirements / installation

ScalaCollider currently compiles against Scala 2.8.1. It requires Java 1.6 and SuperCollider 3.3.1+. It depends on ScalaOSC ( "github.com/Sciss/ScalaOSC":http://github.com/Sciss/ScalaOSC ) and ScalaAudioFile ( "github.com/Sciss/ScalaAudioFile":http://github.com/Sciss/ScalaAudioFile )

The repository contains a project file for Intellij IDEA 10 CE, and project files for sbt. Targets for sbt:

* @update@
* @clean@
* @compile@
* @doc@
* @package@
* @demo@

Running @sbt update@ should download all the dependencies from scala-tools.org.

h3. running the demo

The demo target starts a REPL and executes the file @console-startup.txt@ which by default imports the necessary packages, creates a server-options builder bound to @so@ and defines a @boot@ method. make sure that @so.programPath@ is set correctly:

@scala> so.programPath = "/to/my/scsynth"@

You might omit this, as ScalaCollider will by default read the environment variable @SC_HOME@. Environment variables are stored depending on your operating system. On OS X, if you use the app-bundle of ScalaCollider-Swing, you can access them from the terminal:

pre. $ touch ~/.MacOSX/environment.plist
$ open ~/.MacOSX/environment.plist

On the other hand, if you run ScalaCollider from a Bash terminal, you instead edit @~/.bash_profile@. The entry is something like @export SC_HOME=/path/to/folder-of-scsynth@. On linux, the environment variables probably go in @~/.profile@.

Finally, to boot the server:

@scala> boot@

Please refer to @ExampleCmd.txt@ for some example code. There is also an introductory video for the "Swing frontend":http://github.com/Sciss/ScalaColliderSwing at "www.screencast.com/t/YjUwNDZjMT":http://www.screencast.com/t/YjUwNDZjMT

h3. download and resources

The current version can be downloaded from "github.com/Sciss/ScalaCollider":http://github.com/Sciss/ScalaCollider

More information is available from the wiki at "github.com/Sciss/ScalaCollider/wiki":http://github.com/Sciss/ScalaCollider/wiki

A mailing list is available at "groups.google.com/group/scalacollider":http://groups.google.com/group/scalacollider
